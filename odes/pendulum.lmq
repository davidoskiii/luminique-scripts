using luminique::std::math as mt;
using luminique::std::graphics;
using luminique::std::chrono;
using luminique::std::sys;

const g = 9.81;
const L = 2;
const mu = 0.5;

const THETA_0 = mt::rad(90);
const THETA_DOT_0 = 0;

let window1 = graphics::Window("Pendulum Animation", 800, 600, true);

class Pendulum {
  function __init__(window) {
    this.window = window;
    this.theta = THETA_0;
    this.thetaDot = THETA_DOT_0;
    this.deltaT = 0.01;
    this.realTimePerFrame = this.deltaT * 1000;
    this.threshold = 0.01;
    this.originX = window.width / 2;
    this.originY = window.height / 2 - 200;
    this.bobRadius = 20;
  }

  function getThetaDoubleDot() {
    return -mu * this.thetaDot - (g / L) * mt::sin(this.theta);
  }

  function update() {
    let thetaDoubleDot = this.getThetaDoubleDot();
    this.theta = this.theta + this.thetaDot * this.deltaT;
    this.thetaDot = this.thetaDot + thetaDoubleDot * this.deltaT;
  }

  function draw() {
    this.window.setDrawColor(255, 255, 255, 255);
    this.window.clear();

    let bobX = this.originX + L * 200 * mt::sin(this.theta);
    let bobY = this.originY + L * 200 * mt::cos(this.theta);

    this.window.setDrawColor(0, 0, 0, 255);
    this.window.drawLine(int(this.originX), int(this.originY), int(bobX), int(bobY));

    this.window.setDrawColor(0, 255, 0, 255);
    this.window.fillCircle(int(this.originX), int(this.originY), 2);

    this.window.setDrawColor(255, 0, 0, 255);
    this.window.fillCircle(int(bobX), int(bobY), this.bobRadius);

    this.window.present();
  }

  function simulateMotion() {
    while (mt::fabs(this.theta) > this.threshold || mt::fabs(this.thetaDot) > this.threshold) {
      this.update();
      this.draw();

      let e;
      let quit = false;
      while ((e = this.window.pollEvent()) != nil && !quit) {
        switch (e.type) {
          case graphics::EventType::QUIT: {
            quit = true;
            sys::exit(70);
          }
        }
      }

      chrono::sleep(int(this.realTimePerFrame));
    }
  }
}

window1.show();

let pendulum = Pendulum(window1);
pendulum.simulateMotion();

function handleEvents() {
  let quit = false;
  while (!quit) {
    let e;
    while ((e = window1.pollEvent()) != nil && !quit) {
      switch (e.type) {
        case graphics::EventType::QUIT: {
          quit = true;
        }
      }
    }
  }
}

handleEvents();

window1.hide();
window1.close();
