using luminique::std::math as mt;
using luminique::std::graphics;
using luminique::std::chrono;
using luminique::std::sys;

const g = 9.81;
const r = 1;

const mew = 0.8;
const e = 0.7;

let window1 = graphics::Window("Kinematics", 1200, 800, false);

class Ball {
  function __init__(x, y, vx, vy, radius) {
    this.x = x;
    this.y = y;
    this.vx = vx;
    this.vy = vy;

    this.radius = radius;
  }

  function applyAirResistance(coefficient, deltaT) {
    this.vx = this.vx * (1 - coefficient * deltaT);
    this.vy = this.vy * (1 - coefficient * deltaT);
  }

  function move(deltaT) {
    this.x = this.x + this.vx * deltaT;
    this.y = this.y + this.vy * deltaT;
    this.vy = this.vy - g * deltaT;
  }

  function checkCollisionWithBorders() {
    const k = 0.014; // error coefficient
    if ((this.x - this.radius - k) <= -window1.width / 80 || (this.x + this.radius - k) >= window1.width / 80) {
      this.vx = -this.vx * e;
    }

    if (this.y <= 0 || this.y >= (window1.height - 2 * (this.radius * 40)) / 40) {
      this.vy = -this.vy * e;
    }
  }

  function draw() {
    window1.setDrawColor(41, 158, 72, 255);
    window1.fillCircle(int(window1.width / 2 + this.x * 40), int(window1.height - this.radius * 40 - this.y * 40), this.radius * 40);
  }
}

function checkBallCollision(ball1, ball2) {
  let dist = mt::sqrt((ball1.x - ball2.x) ** 2 + (ball1.y - ball2.y) ** 2);
  if (dist <= (ball1.radius + ball2.radius)) {
    // Swap velocities for simplicity
    let tempVx = ball1.vx;
    let tempVy = ball1.vy;
    ball1.vx = ball2.vx * e;
    ball1.vy = ball2.vy * e;
    ball2.vx = tempVx * e;
    ball2.vy = tempVy * e;
  }
}

function simulateBalls(ball1, ball2) {
  const deltaT = 0.01;
  const realTimePerFrame = deltaT * 1000;

  while (true) {
    // Apply air resistance and move balls
    ball1.applyAirResistance(mew, deltaT);
    ball2.applyAirResistance(mew, deltaT);
    ball1.move(deltaT);
    ball2.move(deltaT);

    // Check for collisions with borders
    ball1.checkCollisionWithBorders();
    ball2.checkCollisionWithBorders();

    // Check for collision between balls
    checkBallCollision(ball1, ball2);

    // Draw both balls
    window1.setDrawColor(255, 255, 255, 255);
    window1.clear();
    ball1.draw();
    ball2.draw();
    window1.present();

    // Handle quit event
    let e;
    let quit = false;
    while ((e = window1.pollEvent()) != nil && !quit) {
      switch (e.type) {
        case graphics::EventType::QUIT: {
          quit = true;
          sys::exit(70);
        }
      }
    }

    chrono::sleep(int(realTimePerFrame));
  }
}

window1.show();

const X1_0 = 10;
const Y1_0 = 12;
const X1_DOT_0 = -10;
const Y1_DOT_0 = 8;

const X2_0 = -10;
const Y2_0 = 10;
const X2_DOT_0 = 15;
const Y2_DOT_0 = 10;

let ball1 = Ball(X1_0, Y1_0, X1_DOT_0, Y1_DOT_0, r);
let ball2 = Ball(X2_0, Y2_0, X2_DOT_0, Y2_DOT_0, r);

simulateBalls(ball1, ball2);

function handleEvents() {
  let quit = false;
  while (!quit) {
    let e;
    while ((e = window1.pollEvent()) != nil && !quit) {
      switch (e.type) {
        case graphics::EventType::QUIT: {
          quit = true;
        }
      }
    }
  }
}

handleEvents();

window1.hide();
window1.close();
